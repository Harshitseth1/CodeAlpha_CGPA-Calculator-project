#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
#include <algorithm>

using namespace std;

// Structure to store course information
struct Course {
    string name;
    double grade;
    int creditHours;
    double gradePoints;
};

// Class to handle CGPA calculations
class CGPACalculator {
private:
    vector<Course> courses;
    double previousCGPA;
    int previousCredits;
    
public:
    CGPACalculator() : previousCGPA(0.0), previousCredits(0) {}
    
    // Function to convert letter grade to numeric grade
    double getGradeFromLetter(char letterGrade) {
        switch(letterGrade) {
            case 'A': case 'a': return 4.0;
            case 'B': case 'b': return 3.0;
            case 'C': case 'c': return 2.0;
            case 'D': case 'd': return 1.0;
            case 'F': case 'f': return 0.0;
            default: return -1.0; // Invalid grade
        }
    }
    
    // Function to get grade as string for display
    string getGradeString(double grade) {
        if (grade >= 3.7) return "A";
        else if (grade >= 3.3) return "A-";
        else if (grade >= 3.0) return "B+";
        else if (grade >= 2.7) return "B";
        else if (grade >= 2.3) return "B-";
        else if (grade >= 2.0) return "C+";
        else if (grade >= 1.7) return "C";
        else if (grade >= 1.3) return "C-";
        else if (grade >= 1.0) return "D";
        else return "F";
    }
    
    // Function to input course data
    void inputCourses() {
        int numCourses;
        cout << "\n========================================\n";
        cout << "         CGPA CALCULATOR\n";
        cout << "========================================\n";
        
        cout << "\nEnter the number of courses: ";
        cin >> numCourses;
        
        if (numCourses <= 0) {
            cout << "Invalid number of courses!" << endl;
            return;
        }
        
        courses.clear();
        courses.resize(numCourses);
        
        cin.ignore(); // Clear the input buffer
        
        for (int i = 0; i < numCourses; i++) {
            cout << "\n--- Course " << (i + 1) << " ---" << endl;
            
            cout << "Enter course name: ";
            getline(cin, courses[i].name);
            
            cout << "Enter credit hours: ";
            cin >> courses[i].creditHours;
            
            if (courses[i].creditHours <= 0) {
                cout << "Invalid credit hours! Setting to 1." << endl;
                courses[i].creditHours = 1;
            }
            
            cout << "Choose grade input method:\n";
            cout << "1. Enter numeric grade (0.0 - 4.0)\n";
            cout << "2. Enter letter grade (A, B, C, D, F)\n";
            cout << "Choice: ";
            
            int choice;
            cin >> choice;
            
            if (choice == 1) {
                cout << "Enter numeric grade (0.0 - 4.0): ";
                cin >> courses[i].grade;
                
                if (courses[i].grade < 0.0 || courses[i].grade > 4.0) {
                    cout << "Invalid grade! Setting to 0.0." << endl;
                    courses[i].grade = 0.0;
                }
            } else if (choice == 2) {
                char letterGrade;
                cout << "Enter letter grade (A, B, C, D, F): ";
                cin >> letterGrade;
                
                courses[i].grade = getGradeFromLetter(letterGrade);
                if (courses[i].grade == -1.0) {
                    cout << "Invalid letter grade! Setting to F (0.0)." << endl;
                    courses[i].grade = 0.0;
                }
            } else {
                cout << "Invalid choice! Setting grade to 0.0." << endl;
                courses[i].grade = 0.0;
            }
            
            // Calculate grade points for this course
            courses[i].gradePoints = courses[i].grade * courses[i].creditHours;
            
            cin.ignore(); // Clear the input buffer
        }
    }
    
    // Function to input previous academic record
    void inputPreviousRecord() {
        char hasPrevious;
        cout << "\nDo you have previous semester records? (y/n): ";
        cin >> hasPrevious;
        
        if (hasPrevious == 'y' || hasPrevious == 'Y') {
            cout << "Enter previous CGPA: ";
            cin >> previousCGPA;
            
            if (previousCGPA < 0.0 || previousCGPA > 4.0) {
                cout << "Invalid CGPA! Setting to 0.0." << endl;
                previousCGPA = 0.0;
            }
            
            cout << "Enter previous total credit hours: ";
            cin >> previousCredits;
            
            if (previousCredits < 0) {
                cout << "Invalid credits! Setting to 0." << endl;
                previousCredits = 0;
            }
        }
    }
    
    // Function to calculate semester GPA
    double calculateSemesterGPA() {
        if (courses.empty()) return 0.0;
        
        double totalGradePoints = 0.0;
        int totalCredits = 0;
        
        for (const auto& course : courses) {
            totalGradePoints += course.gradePoints;
            totalCredits += course.creditHours;
        }
        
        return (totalCredits > 0) ? (totalGradePoints / totalCredits) : 0.0;
    }
    
    // Function to calculate cumulative CGPA
    double calculateCumulativeCGPA() {
        double currentTotalGradePoints = 0.0;
        int currentTotalCredits = 0;
        
        for (const auto& course : courses) {
            currentTotalGradePoints += course.gradePoints;
            currentTotalCredits += course.creditHours;
        }
        
        double previousGradePoints = previousCGPA * previousCredits;
        double totalGradePoints = previousGradePoints + currentTotalGradePoints;
        int totalCredits = previousCredits + currentTotalCredits;
        
        return (totalCredits > 0) ? (totalGradePoints / totalCredits) : 0.0;
    }
    
    // Function to display individual course details
    void displayCourseDetails() {
        cout << "\n========================================\n";
        cout << "         COURSE DETAILS\n";
        cout << "========================================\n";
        
        cout << left << setw(20) << "Course Name" 
             << setw(10) << "Credits" 
             << setw(10) << "Grade" 
             << setw(15) << "Letter Grade"
             << setw(12) << "Grade Points" << endl;
        
        cout << string(67, '-') << endl;
        
        for (const auto& course : courses) {
            cout << left << setw(20) << course.name
                 << setw(10) << course.creditHours
                 << setw(10) << fixed << setprecision(2) << course.grade
                 << setw(15) << getGradeString(course.grade)
                 << setw(12) << course.gradePoints << endl;
        }
    }
    
    // Function to display final results
    void displayResults() {
        if (courses.empty()) {
            cout << "No courses entered!" << endl;
            return;
        }
        
        displayCourseDetails();
        
        double semesterGPA = calculateSemesterGPA();
        double cumulativeCGPA = calculateCumulativeCGPA();
        
        int currentTotalCredits = 0;
        double currentTotalGradePoints = 0.0;
        
        for (const auto& course : courses) {
            currentTotalCredits += course.creditHours;
            currentTotalGradePoints += course.gradePoints;
        }
        
        cout << "\n========================================\n";
        cout << "         FINAL RESULTS\n";
        cout << "========================================\n";
        
        cout << "Current Semester:" << endl;
        cout << "  Total Credits: " << currentTotalCredits << endl;
        cout << "  Total Grade Points: " << fixed << setprecision(2) << currentTotalGradePoints << endl;
        cout << "  Semester GPA: " << fixed << setprecision(2) << semesterGPA << " (" << getGradeString(semesterGPA) << ")" << endl;
        
        cout << "\nCumulative Record:" << endl;
        cout << "  Total Credits: " << (previousCredits + currentTotalCredits) << endl;
        cout << "  Cumulative CGPA: " << fixed << setprecision(2) << cumulativeCGPA << " (" << getGradeString(cumulativeCGPA) << ")" << endl;
        
        if (previousCredits > 0) {
            cout << "\nPrevious Record:" << endl;
            cout << "  Previous Credits: " << previousCredits << endl;
            cout << "  Previous CGPA: " << fixed << setprecision(2) << previousCGPA << endl;
        }
        
        // Performance analysis
        cout << "\n========================================\n";
        cout << "         PERFORMANCE ANALYSIS\n";
        cout << "========================================\n";
        
        if (cumulativeCGPA >= 3.7) {
            cout << "Excellent performance! Keep up the great work!" << endl;
        } else if (cumulativeCGPA >= 3.0) {
            cout << "Good performance! You're doing well." << endl;
        } else if (cumulativeCGPA >= 2.0) {
            cout << "Average performance. Consider improving study habits." << endl;
        } else {
            cout << "Below average performance. Please seek academic support." << endl;
        }
    }
    
    // Function to run the calculator
    void run() {
        inputPreviousRecord();
        inputCourses();
        displayResults();
    }
    
    // Function to reset calculator
    void reset() {
        courses.clear();
        previousCGPA = 0.0;
        previousCredits = 0;
    }
};

// Main function
int main() {
    CGPACalculator calculator;
    char continueCalc;
    
    do {
        calculator.run();
        
        cout << "\n\nDo you want to calculate for another semester? (y/n): ";
        cin >> continueCalc;
        
        if (continueCalc == 'y' || continueCalc == 'Y') {
            calculator.reset();
            cout << "\n" << string(50, '=') << "\n";
        }
        
    } while (continueCalc == 'y' || continueCalc == 'Y');
    
    cout << "\nThank you for using the CGPA Calculator!" << endl;
    cout << "Good luck with your studies!" << endl;
    
    return 0;
}